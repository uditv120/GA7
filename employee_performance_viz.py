"""
Employee Performance Analysis Visualization

Generates a synthetic dataset of 100 employees across departments and regions,
prints the Finance department frequency, and outputs an HTML file embedding
a histogram (bar chart) of department distribution.

Author (for verification): 22f3002257@ds.study.iitm.ac.in
"""

from __future__ import annotations
import base64
from io import BytesIO
from pathlib import Path

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


def generate_dataset(n: int = 100, seed: int = 42) -> pd.DataFrame:
    """Generate a simple synthetic employee dataset with departments and regions."""
    rng = np.random.default_rng(seed)
    departments = ["Finance", "Engineering", "HR", "Sales", "Operations"]
    # Slightly favor Engineering and Sales to create a varied distribution
    dept_weights = np.array([0.22, 0.30, 0.12, 0.24, 0.12])
    dept_weights = dept_weights / dept_weights.sum()

    regions = ["North", "South", "East", "West", "Central"]

    df = pd.DataFrame({
        "EmployeeID": np.arange(1, n + 1),
        "Department": rng.choice(departments, size=n, p=dept_weights),
        "Region": rng.choice(regions, size=n),
    })
    return df


def plot_department_distribution(df: pd.DataFrame):
    """Return a matplotlib Figure with a histogram-like bar chart of department counts."""
    order = df["Department"].value_counts().index
    sns.set_theme(style="whitegrid", context="talk")
    fig, ax = plt.subplots(figsize=(9, 5))
    sns.countplot(data=df, x="Department", order=order, palette="deep", ax=ax)
    ax.set_title("Employee Count by Department", pad=14, fontsize=18, weight="bold")
    ax.set_xlabel("Department")
    ax.set_ylabel("Count of Employees")
    # Annotate counts on bars
    for container in ax.containers:
        ax.bar_label(container, padding=3)
    fig.tight_layout()
    return fig


def figure_to_base64_png(fig: plt.Figure) -> str:
    """Convert a matplotlib figure to a base64-encoded PNG string."""
    buf = BytesIO()
    fig.savefig(buf, format="png", dpi=144, bbox_inches="tight")
    buf.seek(0)
    b64 = base64.b64encode(buf.read()).decode("utf-8")
    plt.close(fig)
    return b64


def save_html_with_image(b64_png: str, finance_count: int, html_path: Path) -> None:
    """Write a self-contained HTML file embedding the chart and summary text."""
    html = f"""<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Employee Department Distribution</title>
  <style>
    :root {{
      --bg: #0b0c0f;
      --card: #14161a;
      --text: #eef2f7;
      --muted: #9aa4b2;
      --accent: #4f8cff;
    }}
    body {{
      margin: 0; padding: 24px; background: var(--bg); color: var(--text);
      font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Inter, Helvetica, Arial, sans-serif;
    }}
    .container {{ max-width: 980px; margin: 0 auto; }}
    .card {{ background: var(--card); border-radius: 12px; padding: 18px 18px 6px; }}
    h1 {{ font-size: 28px; margin: 0 0 8px; }}
    p.meta {{ color: var(--muted); margin: 0 0 18px; }}
    img {{ width: 100%; height: auto; display: block; border-radius: 8px; }}
    .note {{ margin-top: 16px; color: var(--muted); font-size: 14px; }}
    .pill {{ display: inline-block; background: #223; color: var(--text); padding: 4px 8px; border-radius: 999px; font-size: 13px; }}
  </style>
</head>
<body>
  <div class="container">
    <h1>Employee Department Distribution</h1>
    <p class="meta">Business case: Energy company workforce planning â€¢ Generated by Python (matplotlib + seaborn)</p>
    <div class="card">
      <img alt="Histogram (bar chart) of employee counts by department" src="data:image/png;base64,{b64_png}" />
      <p class="note">Finance department frequency: <span class="pill">{finance_count}</span></p>
    </div>
  </div>
</body>
</html>
"""
    html_path.write_text(html, encoding="utf-8")


def main() -> None:
    # 1) Load or generate data (synthetic for this exercise)
    df = generate_dataset(n=100, seed=42)

    # Optionally save a copy of the data for reference
    Path("employee_data.csv").write_text(df.to_csv(index=False), encoding="utf-8")

    # 2) Compute Finance frequency and print to console
    finance_count = int((df["Department"] == "Finance").sum())
    print(f"Finance department count: {finance_count}")

    # 3) Create visualization
    fig = plot_department_distribution(df)

    # 4) Save a self-contained HTML file embedding the chart
    b64 = figure_to_base64_png(fig)
    out_html = Path("employee_department_distribution.html")
    save_html_with_image(b64, finance_count, out_html)
    print(f"Saved HTML visualization to: {out_html.resolve()}")


if __name__ == "__main__":
    main()
